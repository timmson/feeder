name: Gradle Build

on: [ push ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: liberica
          java-version: 17
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and Test with Gradle
        run: ./gradlew clean test

      - name: Build Jar with Gradle
        run: ./gradlew feed-web:bootJar

      # - name: Generate config
      #  run: echo "${{ secrets.CONFIG_FILE }}" > src/config.js

      - name: Build image
        run: docker-compose build

      - name: Push image
        run: |
          # Check if it is release branch
          if [ "${{ github.ref }}" == "refs/head/main" ]; then 
            echo "Skipping push phase"
            exit 0
          fi
          
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          
          SERVICE_NAME=$(echo '${{ github.repository }}' | cut -d'/' -f2)
          echo SERVICE_NAME=$SERVICE_NAME

          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$SERVICE_NAME
          echo IMAGE_ID1=$IMAGE_ID
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID2=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION